//
//  AuthenticatedClient.swift
//  GW2API
//
//  Created by Zhendryk on 7/3/18.
//  Copyright Â© 2018 Zhendryk. All rights reserved.
//


/// The authenticated endpoint client: api.guildwars2.com/v2/...
public class AuthenticatedClient : Client {
    
    /// The account endpoint: api.guildwars2.com/v2/account (Needs API key)
    let account: AccountClient = AccountClient()
    
    /// Sets the API key for the account endpoint
    ///
    /// - Parameter key: A valid API key generated by guildwars2.com
    override func setAPIKey(_ key: String) {
        self.account.setAPIKey(key)
    }
    
    /// The account endpoint client: api.guildwars2.com/v2/account (Needs API key)
    class AccountClient : Client {
        
        /// The account achievements endpoint: information about an account's achievements
        let achievements: AccountAchievementsClient = AccountAchievementsClient()
        
        /// The account bank endpoint: information about the contents of an account's bank
        let bank: AccountBankClient = AccountBankClient()
        
        /// The account dungeons endpoint: information about the current daily cleared dungeons of an account
        let dungeons: AccountDungeonsClient = AccountDungeonsClient()
        
        /// The account dyes endpoint: information about the dyes unlocked by an account
        let dyes: AccountDyesClient = AccountDyesClient()
        
        /// The account finishers endpoint: information about the finishers unlocked by an account
        let finishers: AccountFinishersCient = AccountFinishersCient()
        
        /// The account home endpoint: information about the home instance of an account
        let home: AccountHomeClient = AccountHomeClient()
        
        /// The account inventory endpoint: information about the shared inventory slots of an account
        let inventory: AccountInventoryClient = AccountInventoryClient()
        
        /// The account masteries endpoint: information about the masteries unlocked by an account
        let masteries: AccountMasteriesClient = AccountMasteriesClient()
        
        /// The account materials endpoint: information about the material storage of an account
        let materials: AccountMaterialsClient = AccountMaterialsClient()
        
        /// The account minis endpoint: information about the minipets unlocked by an account
        let minis: AccountMinisClient = AccountMinisClient()
        
        /// The account outfits endpoint: information about the outfits unlocked by an account
        let outfits: AccountOutfitsClient = AccountOutfitsClient()
        
        /// The account raids endpoint: information about the completed raid events between weekly resets of an account
        let raids: AccountRaidsClient = AccountRaidsClient()
        
        /// The account recipes endpoint: information about the recipes unlocked by an account
        let recipes: AccountRecipesClient = AccountRecipesClient()
        
        /// The account skins endpoint: information about the skins unlocked by an account
        let skins: AccountSkinsClient = AccountSkinsClient()
        
        /// The account titles endpoint: information about the titles unlocked by an account
        let titles: AccountTitlesClient = AccountTitlesClient()
        
        /// The account wallet endpoint: information about the wealth / contents of an account's wallet
        let wallet: AccountWalletClient = AccountWalletClient()
        
        /// The account characters endpoint: information about an account's characters
        let characters: AccountCharacterClient = AccountCharacterClient()
        
        /// The account transactions endpoint: information about an account's past and current trading post transactions
        let transactions: AccountTransactionsClient = AccountTransactionsClient()
        
        /// The account pvp endpoint: information about an account's PVP performance / activity
        let pvp: AccountPVPClient = AccountPVPClient()
        
        /// The account tokeninfo endpoint: information about the supplied API key
        let tokeninfo: AccountTokenInfoClient = AccountTokenInfoClient()
        
        
        /// Sets the API key to all authenticated endpoints
        ///
        /// - Parameter key: A valid API key generated from guildwars2.com
        override func setAPIKey(_ key: String) {
            self.apiKey = key
            self.achievements.setAPIKey(key)
            self.bank.setAPIKey(key)
            self.dungeons.setAPIKey(key)
            self.dyes.setAPIKey(key)
            self.finishers.setAPIKey(key)
            self.home.setAPIKey(key)
            self.inventory.setAPIKey(key)
            self.masteries.setAPIKey(key)
            self.materials.setAPIKey(key)
            self.minis.setAPIKey(key)
            self.outfits.setAPIKey(key)
            self.raids.setAPIKey(key)
            self.recipes.setAPIKey(key)
            self.skins.setAPIKey(key)
            self.titles.setAPIKey(key)
            self.wallet.setAPIKey(key)
            self.characters.setAPIKey(key)
            self.transactions.setAPIKey(key)
            self.pvp.setAPIKey(key)
            self.tokeninfo.setAPIKey(key)
        }
        
        /// Returns information about an account associated with an API key
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<Account?, APIError>)
        func get(completion: @escaping (Result<Account?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.account.request, needsAuthorization: true, decode: { json -> Account? in
                guard let result = json as? Account else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account achievements endpoint client: api.guildwars2.com/v2/account/achievements (Needs API key)
    class AccountAchievementsClient : Client {
        
        /// Returns information about an account's achievement progress
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountAchievement]?, APIError>)
        func get(completion: @escaping (Result<[AccountAchievement]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountAchievements.request, needsAuthorization: true, decode: { json -> [AccountAchievement]? in
                guard let result = json as? [AccountAchievement] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account bank endpoint client: api.guildwars2.com/v2/account/bank (Needs API key)
    class AccountBankClient : Client {
        
        /// Returns information about the bank associated with an API key
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountBankItem]?, APIError>)
        func get(completion: @escaping (Result<[AccountBankItem?]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountBank.request, needsAuthorization: true, decode: { json -> [AccountBankItem?]? in
                guard let result = json as? [AccountBankItem?] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account dungeons endpoint client: api.guildwars2.com/v2/account/dungeons (Needs API key)
    class AccountDungeonsClient : Client {
        
        /// Returns a list of all dungeons cleared today by this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[String]?, APIError>)
        func get(completion: @escaping (Result<[String]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountDungeons.request, needsAuthorization: true, decode: { json -> [String]? in
                guard let result = json as? [String] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account dyes endpoint client: api.guildwars2.com/v2/account/dyes (Needs API key)
    class AccountDyesClient : Client {
        
        /// Returns a list of all the dye ids associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountDyes.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account finishers endpoint client: api.guildwars2.com/v2/account/finishers (Needs API key)
    class AccountFinishersCient: Client {
        
        /// Returns information on all of the finishers unlocked on this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountFinisher]?, APIError>)
        func get(completion: @escaping (Result<[AccountFinisher]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountFinishers.request, needsAuthorization: true, decode: { json -> [AccountFinisher]? in
                guard let result = json as? [AccountFinisher] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account home endpoint client: api.guildwars2.com/v2/account/home (Needs API key)
    class AccountHomeClient : Client {
        
        /// The account home cats endpoint: api.guildwars2.com/v2/account/home/cats (Needs API key)
        let cats: AccountHomeCatsClient = AccountHomeCatsClient()
        
        /// The account home nodes endpoint: api.guildwars2.com/v2/account/home/nodes (Needs API key)
        let nodes: AccountHomeNodesClient = AccountHomeNodesClient()
        
        /// Sets the API key for the account/home endpoint
        ///
        /// - Parameter key: A valid API key generated by guildwars2.com
        override func setAPIKey(_ key: String) {
            self.cats.setAPIKey(key)
            self.nodes.setAPIKey(key)
        }
        
        /// The account home cats endpoint client: api.guildwars2.com/v2/account/home/cats (Needs API key)
        class AccountHomeCatsClient : Client {
            
            /// Returns information about unlocked cats in the home instance associated with this account
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<[AccountCat]?, APIError>)
            func get(completion: @escaping (Result<[AccountCat]?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.accountHomeCats.request, needsAuthorization: true, decode: { json -> [AccountCat]? in
                    guard let result = json as? [AccountCat] else { return nil }
                    return result
                }, completion: completion)
            }
        }
        
        /// The account home nodes endpoint client: api.guildwars2.com/v2/account/home/nodes (Needs API key)
        class AccountHomeNodesClient : Client {
            
            /// Returns information about unlocked gathering nodes in the home instance associated with this account
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<[String]?, APIError>)
            func get(completion: @escaping (Result<[String]?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.accountHomeNodes.request, needsAuthorization: true, decode: { json -> [String]? in
                    guard let result = json as? [String] else { return nil }
                    return result
                }, completion: completion)
            }
        }
    }
    
    /// The account inventory endpoint client: api.guildwars2.com/v2/account/inventory (Needs API key)
    class AccountInventoryClient : Client {
        
        /// Returns information about the shared inventory slots associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountInventoryItem]?, APIError>)
        func get(completion: @escaping (Result<[AccountInventoryItem?]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountInventory.request, needsAuthorization: true, decode: { json -> [AccountInventoryItem?]? in
                guard let result = json as? [AccountInventoryItem?] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account masteries endpoint client: api.guildwars2.com/v2/account/masteries (Needs API key)
    class AccountMasteriesClient : Client {
        
        /// The account mastery points endpoint: api.guildwars2.com/v2/account/mastery/points (Needs API key)
        let points: AccountMasteryPointsClient = AccountMasteryPointsClient()
        
        /// Sets the API key for the account/masteries endpoint
        ///
        /// - Parameter key: A valid API key generated by guildwars2.com
        override func setAPIKey(_ key: String) {
            self.apiKey = key
            self.points.setAPIKey(key)
        }
        
        /// Returns information about the unlocked masteries associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountMastery]?, APIError>)
        func get(completion: @escaping (Result<[AccountMastery]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountMasteries.request, needsAuthorization: true, decode: { json -> [AccountMastery]? in
                guard let result = json as? [AccountMastery] else { return nil }
                return result
            }, completion: completion)
        }
        
        /// The account mastery points endpoint client: api.guildwars2.com/v2/account/mastery/points (Needs API key)
        class AccountMasteryPointsClient : Client {
            
            /// Returns a summary of the tallied up total of this account's mastery points
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<AccountMasteryPoints?, APIError>)
            func get(completion: @escaping (Result<AccountMasteryPoints?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.accountMasteryPoints.request, needsAuthorization: true, decode: { json -> AccountMasteryPoints? in
                    guard let result = json as? AccountMasteryPoints else { return nil }
                    return result
                }, completion: completion)
            }
        }
    }
    
    /// The account materials endpoint client: api.guildwars2.com/v2/account/materials (Needs API key)
    class AccountMaterialsClient : Client {
        
        /// Returns information about the material storage associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountMaterial]?, APIError>)
        func get(completion: @escaping (Result<[AccountMaterial]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountMaterials.request, needsAuthorization: true, decode: { json -> [AccountMaterial]? in
                guard let result = json as? [AccountMaterial] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account minis endpoint client: api.guildwars2.com/v2/account/minis (Needs API key)
    class AccountMinisClient : Client {
        
        /// Returns information about unlocked mini pets associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountMinis.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account outfits endpoint client: api.guildwars2.com/v2/account/outfits (Needs API key)
    class AccountOutfitsClient : Client {
        
        /// Returns information about unlocked outfits associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountOutfits.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account raids endpoint client: api.guildwars2.com/v2/account/raids (Needs API key)
    class AccountRaidsClient : Client {
        
        /// Returns a list of completed raid events between weekly resets associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[String]?, APIError>)
        func get(completion: @escaping (Result<[String]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountRaids.request, needsAuthorization: true, decode: { json -> [String]? in
                guard let result = json as? [String] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account recipes endpoint client: api.guildwars2.com/v2/account/recipes (Needs API key)
    class AccountRecipesClient : Client {
        
        /// Returns a list of unlocked recipe ids associated with this account. Resolvable against /v2/recipes
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountRecipes.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account skins endpoint client: api.guildwars2.com/v2/account/skins (Needs API key)
    class AccountSkinsClient : Client {
        
        /// Returns a list of unlocked skin ids associated with this account. Resolvable against /v2/skins
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountSkins.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account titles endpoint client: api.guildwars2.com/v2/account/titles (Needs API key)
    class AccountTitlesClient : Client {
        
        /// Returns a list of unlocked title ids associated with this account. Resolvable against /v2/titles
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[Int]?, APIError>)
        func get(completion: @escaping (Result<[Int]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountTitles.request, needsAuthorization: true, decode: { json -> [Int]? in
                guard let result = json as? [Int] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account wallet endpoint client: api.guildwars2.com/v2/account/wallet (Needs API key)
    class AccountWalletClient : Client {
        
        /// Returns information about the wealth associated with this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[AccountWalletItem]?, APIError>)
        func get(completion: @escaping (Result<[AccountWalletItem]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.accountWallet.request, needsAuthorization: true, decode: { json -> [AccountWalletItem]? in
                guard let result = json as? [AccountWalletItem] else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account characters endpoint client: api.guildwars2.com/v2/characters (Needs API key)
    class AccountCharacterClient : Client {
        
        /// Returns a list of names of characters created on this account
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<[String]?, APIError>)
        func get(completion: @escaping (Result<[String]?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.characters.request, needsAuthorization: true, decode: { json -> [String]? in
                guard let result = json as? [String] else { return nil }
                return result
            }, completion: completion)
        }
        
        /// Returns detailed information about the specified character on this account
        ///
        /// - Parameters:
        ///   - characterName: The name of the character you are searching for
        ///   - completion: Callback function to handle the data returned from the API (Result<AccountCharacter?, APIError>)
        func get(characterName: String, completion: @escaping (Result<AccountCharacter?, APIError>) -> Void) {
            var request = EAuthentication.characters.request
            request.url?.appendPathComponent(characterName)
            fetchAsync(with: request, needsAuthorization: true, decode: { json -> AccountCharacter? in
                guard let result = json as? AccountCharacter else { return nil }
                return result
            }, completion: completion)
        }
    }
    
    /// The account transactions endpoint client: api.guildwars2.com/v2/commerce/transactions (Needs API key)
    class AccountTransactionsClient : Client {
        
        /// The account current transactions endpoint: api.guildwars2.com/v2/commerce/transactions/current (Needs API key)
        let current: ATCurrentClient = ATCurrentClient()
        
        /// The account transactions history endpoint: api.guildwars2.com/v2/commerce/transactions/history (Needs API key)
        let history: ATHistoryClient = ATHistoryClient()
        
        /// Sets the API key for the commerce/transactions endpoint
        ///
        /// - Parameter key: A valid API key generated by guildwars2.com
        override func setAPIKey(_ key: String) {
            self.current.setAPIKey(key)
            self.history.setAPIKey(key)
        }
        
        /// The account current transactions endpoint client: api.guildwars2.com/v2/commerce/transactions/current (Needs API key)
        class ATCurrentClient : Client {
            
            /// The account current buy transactions endpoint: api.guildwars2.com/v2/commerce/transactions/current/buys (Needs API key)
            let buys: ATCBuysClient = ATCBuysClient()
            
            /// The account current buy transactions endpoint: api.guildwars2.com/v2/commerce/transactions/current/sells (Needs API key)
            let sells: ATCSellsClient = ATCSellsClient()
            
            /// Sets the API key for the buy and sell endpoints
            ///
            /// - Parameter key: A valid API key generated by guildwars2.com
            override func setAPIKey(_ key: String) {
                self.buys.setAPIKey(key)
                self.sells.setAPIKey(key)
            }
            
            /// The account current buy transactions endpoint client: api.guildwars2.com/v2/commerce/transactions/current/buys (Needs API key)
            class ATCBuysClient : Client {
                
                /// Returns information on this account's current buy transactions
                ///
                /// - Parameters:
                ///   - completion: Callback function to handle the data returned from the API (Result<[AccountTransaction]?, APIError>)
                func get(completion: @escaping (Result<[AccountTransaction]?, APIError>) -> Void) {
                    fetchAsync(with: EAuthentication.commerceTransactionsCurrentBuys.request, needsAuthorization: true, decode: { json -> [AccountTransaction]? in
                        guard let result = json as? [AccountTransaction] else { return nil }
                        return result
                    }, completion: completion)
                }
            }
            
            /// The account current sell transactions endpoint client: api.guildwars2.com/v2/commerce/transactions/current/sells (Needs API key)
            class ATCSellsClient : Client {
                
                /// Returns informatino on this account's current sell transactions
                ///
                /// - Parameters:
                ///   - completion: Callback function to handle the data returned from the API (Result<[AcccountTransaction]?, APIError>)
                func get(completion: @escaping (Result<[AccountTransaction]?, APIError>) -> Void) {
                    fetchAsync(with: EAuthentication.commerceTransactionsCurrentSells.request, needsAuthorization: true, decode: { json -> [AccountTransaction]? in
                        guard let result = json as? [AccountTransaction] else { return nil }
                        return result
                    }, completion: completion)
                }
            }
        }
        
        /// The account transactions history endpoint client: api.guildwars2.com/v2/commerce/transactions/history (Needs API key)
        class ATHistoryClient : Client {
            
            /// The account transactions history buys endpoint: api.guildwars2.com/v2/commerce/transactions/history/buys (Needs API key)
            let buys: ATHBuysClient = ATHBuysClient()
            
            /// The account transactions history sells endpoint: api.guildwars2.com/v2/commerce/transactions/history/sells (Needs API key)
            let sells: ATHSellsClient = ATHSellsClient()
            
            /// Sets the API key for the buy and sell endpoints
            ///
            /// - Parameter key: A valid API key generated by guildwars2.com
            override func setAPIKey(_ key: String) {
                self.buys.setAPIKey(key)
                self.sells.setAPIKey(key)
            }
            
            /// The account transactions history buys endpoint client: api.guildwars2.com/v2/commerce/transactions/history/buys (Needs API key)
            class ATHBuysClient : Client {
                
                /// Returns information on this account's past buy transactions
                ///
                /// - Parameters:
                ///   - completion: Callback function to handle the data returned from the API (Result<[AcccountTransaction]?, APIError>)
                func get(completion: @escaping (Result<[AccountTransaction]?, APIError>) -> Void) {
                    fetchAsync(with: EAuthentication.commerceTransactionsHistoryBuys.request, needsAuthorization: true, decode: { json -> [AccountTransaction]? in
                        guard let result = json as? [AccountTransaction] else { return nil }
                        return result
                    }, completion: completion)
                }
            }
            
            /// The account transactions history sells endpoint client: api.guildwars2.com/v2/commerce/transactions/history/sells (Needs API key)
            class ATHSellsClient : Client {
                
                /// Returns information on this account's past sell transactions
                ///
                /// - Parameters:
                ///   - completion: Callback function to handle the data returned from the API (Result<[AcccountTransaction]?, APIError>)
                func get(completion: @escaping (Result<[AccountTransaction]?, APIError>) -> Void) {
                    fetchAsync(with: EAuthentication.commerceTransactionsHistorySells.request, needsAuthorization: true, decode: { json -> [AccountTransaction]? in
                        guard let result = json as? [AccountTransaction] else { return nil }
                        return result
                    }, completion: completion)
                }
            }
        }
    }
    
    /// The account pvp endpoint client: api.guildwars2.com/v2/pvp (Needs API key)
    class AccountPVPClient : Client {
        
        /// The account pvp stats endpoint: api.guildwars2.com/pvp/stats (Needs API key)
        let stats: AccountPVPStatsClient = AccountPVPStatsClient()
        
        /// The account pvp games endpoint: api.guildwars2.com/pvp/games (Needs API key)
        let games: AccountPVPGamesClient = AccountPVPGamesClient()
        
        /// The account pvp standings endpoint: api.guildwars2.com/pvp/standings (Needs API key)
        let standings: AccountPVPStandingsClient = AccountPVPStandingsClient()
        
        /// Sets the API key for the api endpoint
        ///
        /// - Parameter key: A valid API key generated by guildwars2.com
        override func setAPIKey(_ key: String) {
            self.stats.setAPIKey(key)
            self.games.setAPIKey(key)
            self.standings.setAPIKey(key)
        }
        
        /// The account pvp stats endpoint client: api.guildwars2.com/v2/pvp/stats (Needs API key)
        class AccountPVPStatsClient : Client {
            
            /// Returns information on this account's performance in sPvP
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<AccountPVPStats?, APIError>)
            func get(completion: @escaping (Result<AccountPVPStats?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.pvpStats.request, needsAuthorization: true, decode: { json -> AccountPVPStats? in
                    guard let result = json as? AccountPVPStats else { return nil }
                    return result
                }, completion: completion)
            }
        }
        
        /// The account pvp games endpoint client: api.guildwars2.com/v2/pvp/games (Needs API key)
        class AccountPVPGamesClient : Client {
            
            /// Returns more detailed information on this account's most recent sPvP matches
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<[String]?, APIError>)
            func get(completion: @escaping (Result<[String]?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.pvpGames.request, needsAuthorization: true, decode: { json -> [String]? in
                    guard let result = json as? [String] else { return nil }
                    return result
                }, completion: completion)
            }
            
            /// Returns detailed information on a specific sPvP game this account was involved in
            ///
            /// - Parameters:
            ///   - id: The id of the game you are searching for
            ///   - completion: Callback function to handle the data returned from the API (Result<[AccountPVPGame]?, APIError>)
            func get(id: String, completion: @escaping (Result<AccountPVPGame?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.pvpGames.idRequest(id: id), needsAuthorization: true, decode: { json -> AccountPVPGame? in
                    guard let res = json as? AccountPVPGame else { return nil }
                    return res
                }, completion: completion)
            }
            
            /// Returns detailed information on multiple specified sPvP games this account was involved in
            ///
            /// - Parameters:
            ///   - ids: The ids of the games you are searching for "id1, id2, id3... etc"
            ///   - completion: Callback function to handle the data returned from the API (Result<[AccountPVPGame]?, APIError>)
            func get(ids: [String], completion: @escaping (Result<[AccountPVPGame]?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.pvpGames.request, needsAuthorization: true, parameters: [URLQueryItem(name: "ids", value: APIUtil.strArrToList(ids))], decode: { json -> [AccountPVPGame]? in
                    guard let res = json as? [AccountPVPGame] else { return nil }
                    return res
                }, completion: completion)
            }
        }
        
        /// The account pvp standings endpoint client: api.guildwars2.com/v2/pvp/standings (Needs API key)
        class AccountPVPStandingsClient : Client {
            
            /// Returns the best and current standing of this account in sPvP leagues
            ///
            /// - Parameters:
            ///   - completion: Callback function to handle the data returned from the API (Result<[AccountPVPStandings]?, APIError>)
            func get(completion: @escaping (Result<[AccountPVPStandings]?, APIError>) -> Void) {
                fetchAsync(with: EAuthentication.pvpStandings.request, needsAuthorization: true, decode: { json -> [AccountPVPStandings]? in
                    guard let result = json as? [AccountPVPStandings] else { return nil }
                    return result
                }, completion: completion)
            }
        }
    }
    
    /// The account tokeninfo endpoint client: api.guildwars2.com/v2/tokeninfo (Needs API key)
    class AccountTokenInfoClient : Client {
        
        /// Returns information about the supplied API key
        ///
        /// - Parameters:
        ///   - completion: Callback function to handle the data returned from the API (Result<AccountToken?, APIError>)
        func get(completion: @escaping (Result<AccountToken?, APIError>) -> Void) {
            fetchAsync(with: EAuthentication.tokeninfo.request, needsAuthorization: true, decode: { json -> AccountToken? in
                guard let result = json as? AccountToken else { return nil }
                return result
            }, completion: completion)
        }
    }
}
